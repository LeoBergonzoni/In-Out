{"version":3,"file":"static/js/498.a265cdbe.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-firebase/authentication/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type {\n  ConfirmationResult,\n  AuthCredential as FirebaseAuthCredential,\n  AuthProvider as FirebaseAuthProvider,\n  CustomParameters as FirebaseCustomParameters,\n  User as FirebaseUser,\n  UserCredential as FirebaseUserCredential,\n  UserInfo as FirebaseUserInfo,\n  UserMetadata as FirebaseUserMeatdata,\n} from 'firebase/auth';\nimport {\n  EmailAuthProvider,\n  FacebookAuthProvider,\n  GithubAuthProvider,\n  GoogleAuthProvider,\n  OAuthCredential,\n  OAuthProvider,\n  RecaptchaVerifier,\n  TwitterAuthProvider,\n  applyActionCode,\n  browserLocalPersistence,\n  browserSessionPersistence,\n  confirmPasswordReset,\n  connectAuthEmulator,\n  createUserWithEmailAndPassword,\n  deleteUser,\n  fetchSignInMethodsForEmail,\n  getAdditionalUserInfo,\n  getAuth,\n  getRedirectResult,\n  inMemoryPersistence,\n  indexedDBLocalPersistence,\n  isSignInWithEmailLink,\n  linkWithCredential,\n  linkWithPhoneNumber,\n  linkWithPopup,\n  linkWithRedirect,\n  reload,\n  revokeAccessToken,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  sendSignInLinkToEmail,\n  setPersistence,\n  signInAnonymously,\n  signInWithCustomToken,\n  signInWithEmailAndPassword,\n  signInWithEmailLink,\n  signInWithPhoneNumber,\n  signInWithPopup,\n  signInWithRedirect,\n  unlink,\n  updateEmail,\n  updatePassword,\n  updateProfile,\n  verifyBeforeUpdateEmail,\n} from 'firebase/auth';\n\nimport type {\n  AdditionalUserInfo,\n  ApplyActionCodeOptions,\n  AuthCredential,\n  AuthStateChange,\n  ConfirmPasswordResetOptions,\n  ConfirmVerificationCodeOptions,\n  CreateUserWithEmailAndPasswordOptions,\n  FetchSignInMethodsForEmailOptions,\n  FetchSignInMethodsForEmailResult,\n  FirebaseAuthenticationPlugin,\n  GetCurrentUserResult,\n  GetIdTokenOptions,\n  GetIdTokenResult,\n  GetTenantIdResult,\n  IsSignInWithEmailLinkOptions,\n  IsSignInWithEmailLinkResult,\n  LinkResult,\n  LinkWithEmailAndPasswordOptions,\n  LinkWithEmailLinkOptions,\n  LinkWithOAuthOptions,\n  LinkWithPhoneNumberOptions,\n  PhoneCodeSentEvent,\n  PhoneVerificationFailedEvent,\n  RevokeAccessTokenOptions,\n  SendEmailVerificationOptions,\n  SendPasswordResetEmailOptions,\n  SendSignInLinkToEmailOptions,\n  SetLanguageCodeOptions,\n  SetPersistenceOptions,\n  SetTenantIdOptions,\n  SignInResult,\n  SignInWithCustomTokenOptions,\n  SignInWithEmailAndPasswordOptions,\n  SignInWithEmailLinkOptions,\n  SignInWithOAuthOptions,\n  SignInWithOpenIdConnectOptions,\n  SignInWithPhoneNumberOptions,\n  UnlinkOptions,\n  UnlinkResult,\n  UpdateEmailOptions,\n  UpdatePasswordOptions,\n  UpdateProfileOptions,\n  UseEmulatorOptions,\n  User,\n  UserInfo,\n  UserMetadata,\n  VerifyBeforeUpdateEmailOptions,\n} from './definitions';\nimport { Persistence, ProviderId } from './definitions';\n\nexport class FirebaseAuthenticationWeb\n  extends WebPlugin\n  implements FirebaseAuthenticationPlugin\n{\n  public static readonly AUTH_STATE_CHANGE_EVENT = 'authStateChange';\n  public static readonly ID_TOKEN_CHANGE_EVENT = 'idTokenChange';\n  public static readonly PHONE_CODE_SENT_EVENT = 'phoneCodeSent';\n  public static readonly PHONE_VERIFICATION_FAILED_EVENT =\n    'phoneVerificationFailed';\n  public static readonly ERROR_NO_USER_SIGNED_IN = 'No user is signed in.';\n  public static readonly ERROR_PHONE_NUMBER_MISSING =\n    'phoneNumber must be provided.';\n  public static readonly ERROR_RECAPTCHA_VERIFIER_MISSING =\n    'recaptchaVerifier must be provided and must be an instance of RecaptchaVerifier.';\n  public static readonly ERROR_CONFIRMATION_RESULT_MISSING =\n    'No confirmation result with this verification id was found.';\n\n  private lastConfirmationResult: Map<string, ConfirmationResult> = new Map();\n\n  constructor() {\n    super();\n    const auth = getAuth();\n    auth.onAuthStateChanged(user => this.handleAuthStateChange(user));\n    auth.onIdTokenChanged(user => void this.handleIdTokenChange(user));\n  }\n\n  public async applyActionCode(options: ApplyActionCodeOptions): Promise<void> {\n    const auth = getAuth();\n    return applyActionCode(auth, options.oobCode);\n  }\n\n  public async createUserWithEmailAndPassword(\n    options: CreateUserWithEmailAndPasswordOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await createUserWithEmailAndPassword(\n      auth,\n      options.email,\n      options.password,\n    );\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async confirmPasswordReset(\n    options: ConfirmPasswordResetOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return confirmPasswordReset(auth, options.oobCode, options.newPassword);\n  }\n\n  public async confirmVerificationCode(\n    options: ConfirmVerificationCodeOptions,\n  ): Promise<SignInResult> {\n    const { verificationCode, verificationId } = options;\n    const confirmationResult = this.lastConfirmationResult.get(verificationId);\n    if (!confirmationResult) {\n      throw new Error(\n        FirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING,\n      );\n    }\n    const userCredential = await confirmationResult.confirm(verificationCode);\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async deleteUser(): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return deleteUser(currentUser);\n  }\n\n  public async fetchSignInMethodsForEmail(\n    options: FetchSignInMethodsForEmailOptions,\n  ): Promise<FetchSignInMethodsForEmailResult> {\n    const auth = getAuth();\n    const signInMethods = await fetchSignInMethodsForEmail(auth, options.email);\n    return {\n      signInMethods,\n    };\n  }\n\n  public async getPendingAuthResult(): Promise<SignInResult> {\n    this.throwNotAvailableError();\n  }\n\n  public async getCurrentUser(): Promise<GetCurrentUserResult> {\n    const auth = getAuth();\n    const userResult = this.createUserResult(auth.currentUser);\n    const result: GetCurrentUserResult = {\n      user: userResult,\n    };\n    return result;\n  }\n\n  public async getIdToken(\n    options?: GetIdTokenOptions,\n  ): Promise<GetIdTokenResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const idToken = await auth.currentUser.getIdToken(options?.forceRefresh);\n    const result: GetIdTokenResult = {\n      token: idToken || '',\n    };\n    return result;\n  }\n\n  public async getRedirectResult(): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await getRedirectResult(auth);\n    const authCredential = userCredential\n      ? OAuthProvider.credentialFromResult(userCredential)\n      : null;\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async getTenantId(): Promise<GetTenantIdResult> {\n    const auth = getAuth();\n    return {\n      tenantId: auth.tenantId,\n    };\n  }\n\n  public async isSignInWithEmailLink(\n    options: IsSignInWithEmailLinkOptions,\n  ): Promise<IsSignInWithEmailLinkResult> {\n    const auth = getAuth();\n    return {\n      isSignInWithEmailLink: isSignInWithEmailLink(auth, options.emailLink),\n    };\n  }\n\n  public async linkWithApple(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new OAuthProvider(ProviderId.APPLE);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithEmailAndPassword(\n    options: LinkWithEmailAndPasswordOptions,\n  ): Promise<LinkResult> {\n    const authCredential = EmailAuthProvider.credential(\n      options.email,\n      options.password,\n    );\n    const userCredential =\n      await this.linkCurrentUserWithCredential(authCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithEmailLink(\n    options: LinkWithEmailLinkOptions,\n  ): Promise<LinkResult> {\n    const authCredential = EmailAuthProvider.credentialWithLink(\n      options.email,\n      options.emailLink,\n    );\n    const userCredential =\n      await this.linkCurrentUserWithCredential(authCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithFacebook(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new FacebookAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      FacebookAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithGameCenter(): Promise<LinkResult> {\n    this.throwNotAvailableError();\n  }\n\n  public async linkWithGithub(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new GithubAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      GithubAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithGoogle(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new GoogleAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      GoogleAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithMicrosoft(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new OAuthProvider(ProviderId.MICROSOFT);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithOpenIdConnect(\n    options: SignInWithOpenIdConnectOptions,\n  ): Promise<SignInResult> {\n    const provider = new OAuthProvider(options.providerId);\n    this.applySignInOptions(options, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithPhoneNumber(\n    options: LinkWithPhoneNumberOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    if (!options.phoneNumber) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n    }\n    if (\n      !options.recaptchaVerifier ||\n      !(options.recaptchaVerifier instanceof RecaptchaVerifier)\n    ) {\n      throw new Error(\n        FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING,\n      );\n    }\n    try {\n      const confirmationResult = await linkWithPhoneNumber(\n        currentUser,\n        options.phoneNumber,\n        options.recaptchaVerifier,\n      );\n      const { verificationId } = confirmationResult;\n      this.lastConfirmationResult.set(verificationId, confirmationResult);\n      const event: PhoneCodeSentEvent = {\n        verificationId,\n      };\n      this.notifyListeners(\n        FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT,\n        event,\n      );\n    } catch (error) {\n      const event: PhoneVerificationFailedEvent = {\n        message: this.getErrorMessage(error),\n      };\n      this.notifyListeners(\n        FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT,\n        event,\n      );\n    }\n  }\n\n  public async linkWithPlayGames(): Promise<LinkResult> {\n    this.throwNotAvailableError();\n  }\n\n  public async linkWithTwitter(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new TwitterAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      TwitterAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithYahoo(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const provider = new OAuthProvider(ProviderId.YAHOO);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async reload(): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return reload(currentUser);\n  }\n\n  public async revokeAccessToken(\n    options: RevokeAccessTokenOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return revokeAccessToken(auth, options.token);\n  }\n\n  public async sendEmailVerification(\n    options: SendEmailVerificationOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return sendEmailVerification(currentUser, options?.actionCodeSettings);\n  }\n\n  public async sendPasswordResetEmail(\n    options: SendPasswordResetEmailOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return sendPasswordResetEmail(\n      auth,\n      options.email,\n      options.actionCodeSettings,\n    );\n  }\n\n  public async sendSignInLinkToEmail(\n    options: SendSignInLinkToEmailOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return sendSignInLinkToEmail(\n      auth,\n      options.email,\n      options.actionCodeSettings,\n    );\n  }\n\n  public async setLanguageCode(options: SetLanguageCodeOptions): Promise<void> {\n    const auth = getAuth();\n    auth.languageCode = options.languageCode;\n  }\n\n  public async setPersistence(options: SetPersistenceOptions): Promise<void> {\n    const auth = getAuth();\n    switch (options.persistence) {\n      case Persistence.BrowserLocal:\n        await setPersistence(auth, browserLocalPersistence);\n        break;\n      case Persistence.BrowserSession:\n        await setPersistence(auth, browserSessionPersistence);\n        break;\n      case Persistence.IndexedDbLocal:\n        await setPersistence(auth, indexedDBLocalPersistence);\n        break;\n      case Persistence.InMemory:\n        await setPersistence(auth, inMemoryPersistence);\n        break;\n    }\n  }\n\n  public async setTenantId(options: SetTenantIdOptions): Promise<void> {\n    const auth = getAuth();\n    auth.tenantId = options.tenantId;\n  }\n\n  public async signInAnonymously(): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInAnonymously(auth);\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithApple(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new OAuthProvider(ProviderId.APPLE);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithCustomToken(\n    options: SignInWithCustomTokenOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInWithCustomToken(auth, options.token);\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithEmailAndPassword(\n    options: SignInWithEmailAndPasswordOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      options.email,\n      options.password,\n    );\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithEmailLink(\n    options: SignInWithEmailLinkOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailLink(\n      auth,\n      options.email,\n      options.emailLink,\n    );\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithFacebook(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new FacebookAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      FacebookAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithGithub(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new GithubAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      GithubAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithGoogle(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new GoogleAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      GoogleAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithMicrosoft(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new OAuthProvider(ProviderId.MICROSOFT);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithOpenIdConnect(\n    options: SignInWithOpenIdConnectOptions,\n  ): Promise<SignInResult> {\n    const provider = new OAuthProvider(options.providerId);\n    this.applySignInOptions(options, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithPhoneNumber(\n    options: SignInWithPhoneNumberOptions,\n  ): Promise<void> {\n    if (!options.phoneNumber) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n    }\n    if (\n      !options.recaptchaVerifier ||\n      !(options.recaptchaVerifier instanceof RecaptchaVerifier)\n    ) {\n      throw new Error(\n        FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING,\n      );\n    }\n    const auth = getAuth();\n    try {\n      const confirmationResult = await signInWithPhoneNumber(\n        auth,\n        options.phoneNumber,\n        options.recaptchaVerifier,\n      );\n      const { verificationId } = confirmationResult;\n      this.lastConfirmationResult.set(verificationId, confirmationResult);\n      const event: PhoneCodeSentEvent = {\n        verificationId,\n      };\n      this.notifyListeners(\n        FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT,\n        event,\n      );\n    } catch (error) {\n      const event: PhoneVerificationFailedEvent = {\n        message: this.getErrorMessage(error),\n      };\n      this.notifyListeners(\n        FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT,\n        event,\n      );\n    }\n  }\n\n  public async signInWithPlayGames(): Promise<SignInResult> {\n    this.throwNotAvailableError();\n  }\n\n  public async signInWithGameCenter(): Promise<SignInResult> {\n    this.throwNotAvailableError();\n  }\n\n  public async signInWithTwitter(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new TwitterAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential =\n      TwitterAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithYahoo(\n    options?: SignInWithOAuthOptions,\n  ): Promise<SignInResult> {\n    const provider = new OAuthProvider(ProviderId.YAHOO);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(\n      provider,\n      options?.mode,\n    );\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signOut(): Promise<void> {\n    const auth = getAuth();\n    await auth.signOut();\n  }\n\n  public async unlink(options: UnlinkOptions): Promise<UnlinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const user = await unlink(auth.currentUser, options.providerId);\n    const userResult = this.createUserResult(user);\n    const result: UnlinkResult = {\n      user: userResult,\n    };\n    return result;\n  }\n\n  public async updateEmail(options: UpdateEmailOptions): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updateEmail(currentUser, options.newEmail);\n  }\n\n  public async updatePassword(options: UpdatePasswordOptions): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updatePassword(currentUser, options.newPassword);\n  }\n\n  public async updateProfile(options: UpdateProfileOptions): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updateProfile(currentUser, {\n      displayName: options.displayName,\n      photoURL: options.photoUrl,\n    });\n  }\n\n  public async useAppLanguage(): Promise<void> {\n    const auth = getAuth();\n    auth.useDeviceLanguage();\n  }\n\n  public async useEmulator(options: UseEmulatorOptions): Promise<void> {\n    const auth = getAuth();\n    const port = options.port || 9099;\n    const scheme = options.scheme || 'http';\n    if (options.host.includes('://')) {\n      connectAuthEmulator(auth, `${options.host}:${port}`);\n    } else {\n      connectAuthEmulator(auth, `${scheme}://${options.host}:${port}`);\n    }\n  }\n\n  public async verifyBeforeUpdateEmail(\n    options: VerifyBeforeUpdateEmailOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return verifyBeforeUpdateEmail(\n      currentUser,\n      options?.newEmail,\n      options?.actionCodeSettings,\n    );\n  }\n\n  private handleAuthStateChange(user: FirebaseUser | null): void {\n    const userResult = this.createUserResult(user);\n    const change: AuthStateChange = {\n      user: userResult,\n    };\n    this.notifyListeners(\n      FirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT,\n      change,\n      true,\n    );\n  }\n\n  private async handleIdTokenChange(user: FirebaseUser | null): Promise<void> {\n    if (!user) {\n      return;\n    }\n    const idToken = await user.getIdToken(false);\n    const result: GetIdTokenResult = {\n      token: idToken,\n    };\n    this.notifyListeners(\n      FirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT,\n      result,\n      true,\n    );\n  }\n\n  private applySignInOptions(\n    options: SignInWithOAuthOptions,\n    provider: OAuthProvider | GoogleAuthProvider | FacebookAuthProvider,\n  ) {\n    if (options.customParameters) {\n      const customParameters: FirebaseCustomParameters = {};\n      options.customParameters.map(parameter => {\n        customParameters[parameter.key] = parameter.value;\n      });\n      provider.setCustomParameters(customParameters);\n    }\n    if (options.scopes) {\n      for (const scope of options.scopes) {\n        provider.addScope(scope);\n      }\n    }\n  }\n\n  public signInWithPopupOrRedirect(\n    provider: FirebaseAuthProvider,\n    mode?: 'popup' | 'redirect',\n  ): Promise<FirebaseUserCredential | never> {\n    const auth = getAuth();\n    if (mode === 'redirect') {\n      return signInWithRedirect(auth, provider);\n    } else {\n      return signInWithPopup(auth, provider);\n    }\n  }\n\n  public linkCurrentUserWithPopupOrRedirect(\n    provider: FirebaseAuthProvider,\n    mode?: 'popup' | 'redirect',\n  ): Promise<FirebaseUserCredential | never> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    if (mode === 'redirect') {\n      return linkWithRedirect(auth.currentUser, provider);\n    } else {\n      return linkWithPopup(auth.currentUser, provider);\n    }\n  }\n\n  public linkCurrentUserWithCredential(\n    credential: FirebaseAuthCredential,\n  ): Promise<FirebaseUserCredential> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return linkWithCredential(auth.currentUser, credential);\n  }\n\n  private createSignInResult(\n    userCredential: FirebaseUserCredential | null,\n    authCredential: FirebaseAuthCredential | null,\n  ): SignInResult {\n    const userResult = this.createUserResult(userCredential?.user || null);\n    const credentialResult = this.createCredentialResult(authCredential);\n    const additionalUserInfoResult =\n      this.createAdditionalUserInfoResult(userCredential);\n    const result: SignInResult = {\n      user: userResult,\n      credential: credentialResult,\n      additionalUserInfo: additionalUserInfoResult,\n    };\n    return result;\n  }\n\n  private createCredentialResult(\n    credential: FirebaseAuthCredential | null,\n  ): AuthCredential | null {\n    if (!credential) {\n      return null;\n    }\n    const result: AuthCredential = {\n      providerId: credential.providerId,\n    };\n    if (credential instanceof OAuthCredential) {\n      result.accessToken = credential.accessToken;\n      result.idToken = credential.idToken;\n      result.secret = credential.secret;\n    }\n    return result;\n  }\n\n  private createUserResult(user: FirebaseUser | null): User | null {\n    if (!user) {\n      return null;\n    }\n    const result: User = {\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      isAnonymous: user.isAnonymous,\n      metadata: this.createUserMetadataResult(user.metadata),\n      phoneNumber: user.phoneNumber,\n      photoUrl: user.photoURL,\n      providerData: this.createUserProviderDataResult(user.providerData),\n      providerId: user.providerId,\n      tenantId: user.tenantId,\n      uid: user.uid,\n    };\n    return result;\n  }\n\n  private createUserMetadataResult(\n    metadata: FirebaseUserMeatdata,\n  ): UserMetadata {\n    const result: UserMetadata = {};\n    if (metadata.creationTime) {\n      result.creationTime = Date.parse(metadata.creationTime);\n    }\n    if (metadata.lastSignInTime) {\n      result.lastSignInTime = Date.parse(metadata.lastSignInTime);\n    }\n    return result;\n  }\n\n  private createUserProviderDataResult(\n    providerData: FirebaseUserInfo[],\n  ): UserInfo[] {\n    return providerData.map(data => ({\n      displayName: data.displayName,\n      email: data.email,\n      phoneNumber: data.phoneNumber,\n      photoUrl: data.photoURL,\n      providerId: data.providerId,\n      uid: data.uid,\n    }));\n  }\n\n  private createAdditionalUserInfoResult(\n    credential: FirebaseUserCredential | null,\n  ): AdditionalUserInfo | null {\n    if (!credential) {\n      return null;\n    }\n    const additionalUserInfo = getAdditionalUserInfo(credential);\n    if (!additionalUserInfo) {\n      return null;\n    }\n    const { isNewUser, profile, providerId, username } = additionalUserInfo;\n    const result: AdditionalUserInfo = {\n      isNewUser,\n    };\n    if (providerId !== null) {\n      result.providerId = providerId;\n    }\n    if (profile !== null) {\n      result.profile = profile as { [key: string]: unknown };\n    }\n    if (username !== null && username !== undefined) {\n      result.username = username;\n    }\n    return result;\n  }\n\n  private getErrorMessage(error: unknown): string {\n    if (\n      error instanceof Object &&\n      'message' in error &&\n      typeof error['message'] === 'string'\n    ) {\n      return error['message'];\n    }\n    return JSON.stringify(error);\n  }\n\n  private throwNotAvailableError(): never {\n    throw new Error('Not available on web.');\n  }\n}\n"],"names":["FirebaseAuthenticationWeb","WebPlugin","constructor","super","lastConfirmationResult","Map","auth","getAuth","onAuthStateChanged","user","this","handleAuthStateChange","onIdTokenChanged","handleIdTokenChange","applyActionCode","options","oobCode","createUserWithEmailAndPassword","userCredential","email","password","createSignInResult","confirmPasswordReset","newPassword","confirmVerificationCode","verificationCode","verificationId","confirmationResult","get","Error","ERROR_CONFIRMATION_RESULT_MISSING","confirm","deleteUser","currentUser","ERROR_NO_USER_SIGNED_IN","fetchSignInMethodsForEmail","signInMethods","getPendingAuthResult","throwNotAvailableError","getCurrentUser","createUserResult","getIdToken","token","forceRefresh","getRedirectResult","authCredential","OAuthProvider","credentialFromResult","getTenantId","tenantId","isSignInWithEmailLink","emailLink","linkWithApple","provider","ProviderId","APPLE","applySignInOptions","linkCurrentUserWithPopupOrRedirect","mode","linkWithEmailAndPassword","EmailAuthProvider","credential","linkCurrentUserWithCredential","linkWithEmailLink","credentialWithLink","linkWithFacebook","FacebookAuthProvider","linkWithGameCenter","linkWithGithub","GithubAuthProvider","linkWithGoogle","GoogleAuthProvider","linkWithMicrosoft","MICROSOFT","linkWithOpenIdConnect","providerId","linkWithPhoneNumber","phoneNumber","ERROR_PHONE_NUMBER_MISSING","recaptchaVerifier","RecaptchaVerifier","ERROR_RECAPTCHA_VERIFIER_MISSING","set","event","notifyListeners","PHONE_CODE_SENT_EVENT","error","message","getErrorMessage","PHONE_VERIFICATION_FAILED_EVENT","linkWithPlayGames","linkWithTwitter","TwitterAuthProvider","linkWithYahoo","YAHOO","reload","revokeAccessToken","sendEmailVerification","actionCodeSettings","sendPasswordResetEmail","sendSignInLinkToEmail","setLanguageCode","languageCode","setPersistence","persistence","Persistence","BrowserLocal","browserLocalPersistence","BrowserSession","browserSessionPersistence","IndexedDbLocal","indexedDBLocalPersistence","InMemory","inMemoryPersistence","setTenantId","signInAnonymously","signInWithApple","signInWithPopupOrRedirect","signInWithCustomToken","signInWithEmailAndPassword","signInWithEmailLink","signInWithFacebook","signInWithGithub","signInWithGoogle","signInWithMicrosoft","signInWithOpenIdConnect","signInWithPhoneNumber","signInWithPlayGames","signInWithGameCenter","signInWithTwitter","signInWithYahoo","signOut","unlink","updateEmail","newEmail","updatePassword","updateProfile","displayName","photoURL","photoUrl","useAppLanguage","useDeviceLanguage","useEmulator","port","scheme","host","includes","connectAuthEmulator","verifyBeforeUpdateEmail","change","AUTH_STATE_CHANGE_EVENT","result","ID_TOKEN_CHANGE_EVENT","customParameters","map","parameter","key","value","setCustomParameters","scopes","scope","addScope","signInWithRedirect","signInWithPopup","linkWithRedirect","linkWithPopup","linkWithCredential","createCredentialResult","additionalUserInfo","createAdditionalUserInfoResult","OAuthCredential","accessToken","idToken","secret","emailVerified","isAnonymous","metadata","createUserMetadataResult","providerData","createUserProviderDataResult","uid","creationTime","Date","parse","lastSignInTime","data","getAdditionalUserInfo","isNewUser","profile","username","undefined","Object","JSON","stringify"],"sourceRoot":""}